// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: proto/fileupload.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileUploadClient is the client API for FileUpload service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileUploadClient interface {
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (FileUpload_UploadFileClient, error)
}

type fileUploadClient struct {
	cc grpc.ClientConnInterface
}

func NewFileUploadClient(cc grpc.ClientConnInterface) FileUploadClient {
	return &fileUploadClient{cc}
}

func (c *fileUploadClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (FileUpload_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileUpload_ServiceDesc.Streams[0], "/fileupload.FileUpload/uploadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileUploadUploadFileClient{stream}
	return x, nil
}

type FileUpload_UploadFileClient interface {
	Send(*FileChunk) error
	CloseAndRecv() (*UploadStatus, error)
	grpc.ClientStream
}

type fileUploadUploadFileClient struct {
	grpc.ClientStream
}

func (x *fileUploadUploadFileClient) Send(m *FileChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileUploadUploadFileClient) CloseAndRecv() (*UploadStatus, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileUploadServer is the server API for FileUpload service.
// All implementations must embed UnimplementedFileUploadServer
// for forward compatibility
type FileUploadServer interface {
	UploadFile(FileUpload_UploadFileServer) error
	mustEmbedUnimplementedFileUploadServer()
}

// UnimplementedFileUploadServer must be embedded to have forward compatible implementations.
type UnimplementedFileUploadServer struct {
}

func (UnimplementedFileUploadServer) UploadFile(FileUpload_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedFileUploadServer) mustEmbedUnimplementedFileUploadServer() {}

// UnsafeFileUploadServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileUploadServer will
// result in compilation errors.
type UnsafeFileUploadServer interface {
	mustEmbedUnimplementedFileUploadServer()
}

func RegisterFileUploadServer(s grpc.ServiceRegistrar, srv FileUploadServer) {
	s.RegisterService(&FileUpload_ServiceDesc, srv)
}

func _FileUpload_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileUploadServer).UploadFile(&fileUploadUploadFileServer{stream})
}

type FileUpload_UploadFileServer interface {
	SendAndClose(*UploadStatus) error
	Recv() (*FileChunk, error)
	grpc.ServerStream
}

type fileUploadUploadFileServer struct {
	grpc.ServerStream
}

func (x *fileUploadUploadFileServer) SendAndClose(m *UploadStatus) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileUploadUploadFileServer) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileUpload_ServiceDesc is the grpc.ServiceDesc for FileUpload service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileUpload_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fileupload.FileUpload",
	HandlerType: (*FileUploadServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "uploadFile",
			Handler:       _FileUpload_UploadFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/fileupload.proto",
}
